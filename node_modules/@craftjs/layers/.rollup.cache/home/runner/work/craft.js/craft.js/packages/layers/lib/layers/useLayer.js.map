{"version":3,"file":"useLayer.js","sourceRoot":"","sources":["../../src/layers/useLayer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAE5C,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAG9C,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,MAAM,UAAU,QAAQ,CAAW,OAA6B;IAC9D,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,kBAAkB,EAAE,GAAG,UAAU,CAC9D,YAAY,CACb,CAAC;IAEF,MAAM,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,SAAS,EAAE,GAAG,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE;QAC1E,OAAO,EAAE,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAChD,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE;KAC1D,CAAC,CAAC,CAAC;IAEJ,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,WAAW,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC;YACjD,gBAAgB,EAAE,CAAC,QAAiB,EAAE,EAAE,CACtC,cAAc,CAAC,gBAAgB,CAAC,EAAE,EAAE,QAAQ,CAAC;SAChD,CAAC;IACJ,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzB,MAAM,UAAU,GAAG,OAAO,CACxB,GAAG,EAAE,CACH,kBAAkB,CAAC;QACjB,KAAK,EAAE,CAAC,EAAe,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;QAC5D,IAAI,EAAE,CAAC,EAAe,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;QAC1D,WAAW,EAAE,CAAC,EAAe,EAAE,EAAE,CAC/B,kBAAkB,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC;KACzC,CAAC,EACJ,CAAC,kBAAkB,EAAE,EAAE,CAAC,CACzB,CAAC;IAEF,OAAO;QACL,EAAE;QACF,KAAK;QACL,QAAQ;QACR,OAAO;QACP,UAAU;QACV,GAAG,SAAS;KACb,CAAC;AACJ,CAAC","sourcesContent":["import { useEditor } from '@craftjs/core';\nimport { wrapConnectorHooks } from '@craftjs/utils';\nimport { useContext, useMemo } from 'react';\n\nimport { LayerContext } from './LayerContext';\n\nimport { Layer } from '../interfaces';\nimport { useLayerManager } from '../manager';\n\nexport function useLayer<S = null>(collect?: (layer: Layer) => S) {\n  const { id, depth, connectors: internalConnectors } = useContext(\n    LayerContext\n  );\n\n  const { actions: managerActions, ...collected } = useLayerManager((state) => {\n    return id && state.layers[id] && collect && collect(state.layers[id]);\n  });\n\n  const { children } = useEditor((state, query) => ({\n    children: state.nodes[id] && query.node(id).descendants(),\n  }));\n\n  const actions = useMemo(() => {\n    return {\n      toggleLayer: () => managerActions.toggleLayer(id),\n      setExpandedState: (expanded: boolean) =>\n        managerActions.setExpandedState(id, expanded),\n    };\n  }, [managerActions, id]);\n\n  const connectors = useMemo(\n    () =>\n      wrapConnectorHooks({\n        layer: (el: HTMLElement) => internalConnectors.layer(el, id),\n        drag: (el: HTMLElement) => internalConnectors.drag(el, id),\n        layerHeader: (el: HTMLElement) =>\n          internalConnectors.layerHeader(el, id),\n      }),\n    [internalConnectors, id]\n  );\n\n  return {\n    id,\n    depth,\n    children,\n    actions,\n    connectors,\n    ...collected,\n  };\n}\n"]}